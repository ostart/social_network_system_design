// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Table users {
  id uuid [primary key]
  login nvarchar
  passwordHash nvarchar
  isActive bit
  created_at timestamp
  last_visit_at timestamp
  accessFailedCount int
  isDeleted bit
  deleter_id uuid
  deleted_at timestamp
}

Table profile {
  id bigint [primary key]
  user_id uuid
  name nvarchar
  surname nvarchar
  description text
  email nvarchar
  emailConfirmed bit
  photos uuid[]
  location nvarchar
  geo_hash nvarchar
  interests nvarchar
  created_at timestamp
  modified_at timestamp
}

Table relationships {
  source_user_id uuid
  target_user_id uuid
  type relationships_type
  created_at timestamp
}

enum relationships_type {
  follow
  friend
  relative
  couple
}

Table posts {
  id bigint [primary key]
  title nvarchar
  body text [note: 'Content of the post']
  user_id uuid
  tags nvarchar
  status posts_status
  created_at timestamp
  modifier_id uuid
  modified_at timestamp
}

enum posts_status {
  created
  published
  deleted
}

Table post_stats {
  id bigint [primary key]
  post_id bigint
  likes int
  dislikes int
  views int
}

Table post_comments {
  id bigint [primary key]
  post_id bigint
  user_id uuid
  text text
  created_at timestamp
  modified_at timestamp
  likes int
  dislikes int
}

Table media {
  id uuid [primary key]
  type media_type
  format nvarchar
  content byte[]
}

enum media_type {
  photo
  audio
  video
}

Table chats {
  id uuid [primary key]
  title nvarchar
  description text
}

Table messages {
  id bigint [primary key]
  from uuid
  to uuid
  type messages_type
  delivered bit
}

enum messages_type {
  user
  chat
}

Ref: profile.photos <> media.id // many-to-many

Ref: users.deleter_id > users.id // many-to-one

Ref: profile.user_id - users.id // one-to-one

Ref: posts.user_id > users.id // many-to-one

Ref: posts.modifier_id > users.id // many-to-one

Ref: post_stats.post_id - posts.id // one-to-one

Ref: post_comments.post_id > posts.id // many-to-one

Ref: post_comments.user_id > users.id // many-to-one

Ref: users.id < relationships.source_user_id // one-to-many

Ref: users.id < relationships.target_user_id // one-to-many

Ref: users.id < messages.from // one-to-many

Ref: users.id < messages.to // one-to-many

Ref: chats.id < messages.to // one-to-many
