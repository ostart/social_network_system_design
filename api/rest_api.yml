openapi: 3.0.3
info:
  title: System Design - OpenAPI 3.0
  description: |-
    Это System Design социальной сети для курса по [System Design](https://balun.courses/courses/system_design)
  version: 1.0.11
tags:
  - name: user
    description: Operations about user
paths:
  /user/addFriends:
    post:
      tags:
        - user
      summary: Add list of friends to user
      description: Add list of friends with given input array to user
      operationId: addFriends
      parameters:
        - name: userId
          in: query
          description: ID of user which friends to add
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid UserId
        default:
          description: successful operation
      security:
        - api_key: []

  /user/removeFriends:
    post:
      tags:
        - user
      summary: Add list of friends to user
      description: Remove list of friends with given input array to user
      operationId: removeFriends
      parameters:
        - name: userId
          in: query
          description: ID of user which friends to remove
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid UserId
        default:
          description: successful operation
      security:
        - api_key: []

  /user/profile:
    get:
      tags:
        - user
      summary: Get user profile
      description: Get user profile
      operationId: getProfile
      parameters:
        - name: userId
          in: query
          description: ID of user which friends to add
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User' 
        '400':
          description: Invalid UserId
        '404':
          description: Profile not found
        default:
          description: successful operation
      security:
        - api_key: []

  /post/add:
    post:
      tags:
        - post
      summary: Add a new post to the user
      description: Add a new post to the user
      operationId: addPost
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input
      security:
        - api_key: []

  /post/{postId}/uploadMedia:
    post:
      tags:
        - post
      summary: uploads media
      description: upload media to post
      operationId: uploadMedia
      parameters:
        - name: postId
          in: path
          description: ID of post to add media
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: array
              items:
                type: string
                format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid postId
        default:
          description: successful operation
      security:
        - api_key: []

  /post/{userId}:
    get:
      tags:
        - post
      summary: get posts by userId
      description: get user's posts
      operationId: getUserPosts
      parameters:
        - name: userId
          in: path
          description: ID of user to get posts
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          description: Invalid userId
        default:
          description: successful operation

  /messages/{userId}:
    get:
      tags:
        - messages
      summary: get messages by userId
      description: get user's messages
      operationId: getUserMessages
      parameters:
        - name: userId
          in: path
          description: ID of user to get messages
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '400':
          description: Invalid userId
        default:
          description: successful operation
      security:
        - api_key: []
    post:
      tags:
        - messages
      summary: post messages from userId
      description: get user's messages
      operationId: addUserMessage
      requestBody:
        description: send message to user or chat
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid userId
        default:
          description: successful operation
      security:
        - api_key: []

  /chats/{userId}:
    get:
      tags:
        - chats
      summary: get chats by userId
      description: get user's chats
      operationId: getUserChats
      parameters:
        - name: userId
          in: path
          description: ID of user to get chats
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
        '400':
          description: Invalid userId
        default:
          description: successful operation
      security:
        - api_key: []

components:
  schemas:
    UserId:
      type: string
      format: uuid
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
    Post:
      required:
        - title
        - content
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        title:
          type: string
          example: doggie
        content:
          type: string
          example: New pet status in the store
        photoUrls:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
    Message:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        from:
          $ref: '#/components/schemas/UserId'
        to:
          type: string
          format: uuid
        destination:
          type: string
          description: user or chat
          example: user
          enum:
            - user
            - chat
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
